{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rbaxt\\\\Projects\\\\recoil-table\\\\packages\\\\recoil-table-ui\\\\RecoilTableBody.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRecoilValue } from 'recoil';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport { useTable } from 'recoil-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RecoilTableBody({\n  tableKey\n}) {\n  _s();\n\n  const {\n    columnAtom,\n    selectRows\n  } = useTable(tableKey);\n  const columns = useRecoilValue(columnAtom);\n  const rows = useRecoilValue(selectRows);\n  return /*#__PURE__*/_jsxDEV(TableBody, {\n    children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n        children: row[column.accessor]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecoilTableBody, \"dCcdODNLNFM/o0CPyaB8yTZ9i84=\", false, function () {\n  return [useTable, useRecoilValue, useRecoilValue];\n});\n\n_c = RecoilTableBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoilTableBody\");","map":{"version":3,"sources":["C:/Users/rbaxt/Projects/recoil-table/packages/recoil-table-ui/RecoilTableBody.tsx"],"names":["useRecoilValue","TableBody","TableRow","TableCell","useTable","RecoilTableBody","tableKey","columnAtom","selectRows","columns","rows","map","row","column","accessor"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAMA,OAAO,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AAAA;;AACnD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6BJ,QAAQ,CAACE,QAAD,CAA3C;AACA,QAAMG,OAAO,GAAGT,cAAc,CAACO,UAAD,CAA9B;AACA,QAAMG,IAAI,GAAGV,cAAc,CAACQ,UAAD,CAA3B;AACA,sBACE,QAAC,SAAD;AAAA,cACGE,IAAI,CAACC,GAAL,CAAUC,GAAD,iBACR,QAAC,QAAD;AAAA,gBACGH,OAAO,CAACE,GAAR,CAAaE,MAAD,iBACX,QAAC,SAAD;AAAA,kBAAYD,GAAG,CAACC,MAAM,CAACC,QAAR;AAAf;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAfeT,e;UACqBD,Q,EACnBJ,c,EACHA,c;;;KAHCK,e","sourcesContent":["import { useRecoilValue } from 'recoil';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport { useTable } from 'recoil-table';\r\n\r\ninterface Props {\r\n  tableKey: string;\r\n}\r\n\r\nexport function RecoilTableBody({ tableKey }: Props) {\r\n  const { columnAtom, selectRows } = useTable(tableKey);\r\n  const columns = useRecoilValue(columnAtom);\r\n  const rows = useRecoilValue(selectRows);\r\n  return (\r\n    <TableBody>\r\n      {rows.map((row: any) => (\r\n        <TableRow>\r\n          {columns.map((column) => (\r\n            <TableCell>{row[column.accessor]}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n      ))}\r\n    </TableBody>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import namor from 'namor';\n\nconst range = len => {\n  const arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    lastName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single'\n  };\n};\n\nexport default function makeData(...lens) {\n  // @ts-ignore\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(d => {\n      return { ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\nexport const DATA = makeData(200);\nexport function asyncDataFetch(page, numPerPage) {\n  return new Promise(res => {\n    if (page && numPerPage) {\n      const start = rowsPerPage * page;\n      const end = start + rowsPerPage - 1;\n      const pageRows = DATA.slice(start, end);\n    } else {\n      res(DATA);\n    }\n  });\n}\nexport const COLUMNS = [{\n  Header: 'Age',\n  accessor: 'age'\n}, {\n  Header: 'Visits',\n  accessor: 'visits'\n}, {\n  Header: 'Status',\n  accessor: 'status'\n}, {\n  Header: 'Profile Progress',\n  accessor: 'progress'\n}];","map":{"version":3,"sources":["C:/Users/rbaxt/Projects/recoil-table/packages/client/src/TableUtils.ts"],"names":["namor","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","generate","words","numbers","lastName","age","floor","visits","progress","status","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined","DATA","asyncDataFetch","page","numPerPage","Promise","res","start","rowsPerPage","end","pageRows","slice","COLUMNS","Header","accessor"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAK,GAAIC,GAAD,IAAiB;AAC7B,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACD;;AACD,SAAOD,GAAP;AACD,CAND;;AAQA,MAAMG,SAAS,GAAG,MAAM;AACtB,QAAMC,YAAY,GAAGC,IAAI,CAACC,MAAL,EAArB;AACA,SAAO;AACLC,IAAAA,SAAS,EAAEV,KAAK,CAACW,QAAN,CAAe;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAf,CADN;AAELC,IAAAA,QAAQ,EAAEd,KAAK,CAACW,QAAN,CAAe;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAf,CAFL;AAGLE,IAAAA,GAAG,EAAEP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,EAA3B,CAHA;AAILQ,IAAAA,MAAM,EAAET,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAJH;AAKLS,IAAAA,QAAQ,EAAEV,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,GAA3B,CALL;AAMLU,IAAAA,MAAM,EACJZ,YAAY,GAAG,IAAf,GACI,cADJ,GAEIA,YAAY,GAAG,IAAf,GACA,aADA,GAEA;AAXD,GAAP;AAaD,CAfD;;AAiBA,eAAe,SAASa,QAAT,CAAkB,GAAGC,IAArB,EAAkC;AAC/C;AACA,QAAMC,aAAa,GAAG,CAACC,KAAK,GAAG,CAAT,KAAe;AACnC,UAAMrB,GAAG,GAAGmB,IAAI,CAACE,KAAD,CAAhB;AACA,WAAOtB,KAAK,CAACC,GAAD,CAAL,CAAWsB,GAAX,CAAgBC,CAAD,IAAO;AAC3B,aAAO,EACL,GAAGnB,SAAS,EADP;AAELoB,QAAAA,OAAO,EAAEL,IAAI,CAACE,KAAK,GAAG,CAAT,CAAJ,GAAkBD,aAAa,CAACC,KAAK,GAAG,CAAT,CAA/B,GAA6CI;AAFjD,OAAP;AAID,KALM,CAAP;AAMD,GARD;;AAUA,SAAOL,aAAa,EAApB;AACD;AAED,OAAO,MAAMM,IAAI,GAAGR,QAAQ,CAAC,GAAD,CAArB;AAEP,OAAO,SAASS,cAAT,CAAwBC,IAAxB,EAAuCC,UAAvC,EAA4D;AACjE,SAAO,IAAIC,OAAJ,CAAaC,GAAD,IAAS;AAC1B,QAAIH,IAAI,IAAIC,UAAZ,EAAwB;AACtB,YAAMG,KAAK,GAAGC,WAAW,GAAGL,IAA5B;AACA,YAAMM,GAAG,GAAGF,KAAK,GAAGC,WAAR,GAAsB,CAAlC;AACA,YAAME,QAAQ,GAAGT,IAAI,CAACU,KAAL,CAAWJ,KAAX,EAAkBE,GAAlB,CAAjB;AACD,KAJD,MAIO;AACLH,MAAAA,GAAG,CAACL,IAAD,CAAH;AACD;AACF,GARM,CAAP;AASD;AAED,OAAO,MAAMW,OAAO,GAAG,CACrB;AACEC,EAAAA,MAAM,EAAE,KADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADqB,EAKrB;AACED,EAAAA,MAAM,EAAE,QADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CALqB,EASrB;AACED,EAAAA,MAAM,EAAE,QADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CATqB,EAarB;AACED,EAAAA,MAAM,EAAE,kBADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CAbqB,CAAhB","sourcesContent":["import namor from 'namor';\r\n\r\nconst range = (len: number) => {\r\n  const arr = [];\r\n  for (let i = 0; i < len; i++) {\r\n    arr.push(i);\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst newPerson = () => {\r\n  const statusChance = Math.random();\r\n  return {\r\n    firstName: namor.generate({ words: 1, numbers: 0 }),\r\n    lastName: namor.generate({ words: 1, numbers: 0 }),\r\n    age: Math.floor(Math.random() * 30),\r\n    visits: Math.floor(Math.random() * 100),\r\n    progress: Math.floor(Math.random() * 100),\r\n    status:\r\n      statusChance > 0.66\r\n        ? 'relationship'\r\n        : statusChance > 0.33\r\n        ? 'complicated'\r\n        : 'single',\r\n  };\r\n};\r\n\r\nexport default function makeData(...lens: any[]) {\r\n  // @ts-ignore\r\n  const makeDataLevel = (depth = 0) => {\r\n    const len = lens[depth];\r\n    return range(len).map((d) => {\r\n      return {\r\n        ...newPerson(),\r\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n      };\r\n    });\r\n  };\r\n\r\n  return makeDataLevel();\r\n}\r\n\r\nexport const DATA = makeData(200);\r\n\r\nexport function asyncDataFetch(page?: number, numPerPage?: number) {\r\n  return new Promise((res) => {\r\n    if (page && numPerPage) {\r\n      const start = rowsPerPage * page;\r\n      const end = start + rowsPerPage - 1;\r\n      const pageRows = DATA.slice(start, end);\r\n    } else {\r\n      res(DATA);\r\n    }\r\n  });\r\n}\r\n\r\nexport const COLUMNS = [\r\n  {\r\n    Header: 'Age',\r\n    accessor: 'age',\r\n  },\r\n  {\r\n    Header: 'Visits',\r\n    accessor: 'visits',\r\n  },\r\n  {\r\n    Header: 'Status',\r\n    accessor: 'status',\r\n  },\r\n  {\r\n    Header: 'Profile Progress',\r\n    accessor: 'progress',\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}
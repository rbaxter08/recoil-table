{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rbaxt\\\\Projects\\\\recoil-table\\\\packages\\\\recoil-table-ui\\\\RecoilTablePagination.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRecoilState } from 'recoil';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { useTable } from 'recoil-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RecoilTablePagination({\n  tableKey,\n  options\n}) {\n  _s();\n\n  const {\n    pageAtom\n  } = useTable(tableKey, options);\n  const [page, setPage] = useRecoilState(pageAtom);\n  const {\n    total\n  } = useRecoilValue(selectRows);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(prev => ({ ...prev,\n      page: newPage\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    count: page.totalRows,\n    rowsPerPage: page.rowsPerPage,\n    page: page.page,\n    onPageChange: handleChangePage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecoilTablePagination, \"TEUoNb8FvgvEBwLWB+KDUBZ0ia4=\", true, function () {\n  return [useTable, useRecoilState];\n});\n\n_c = RecoilTablePagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoilTablePagination\");","map":{"version":3,"sources":["C:/Users/rbaxt/Projects/recoil-table/packages/recoil-table-ui/RecoilTablePagination.tsx"],"names":["useRecoilState","TablePagination","useTable","RecoilTablePagination","tableKey","options","pageAtom","page","setPage","total","useRecoilValue","selectRows","handleChangePage","event","newPage","prev","totalRows","rowsPerPage"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,SAASC,QAAT,QAAkC,cAAlC;;AAEA,OAAO,SAASC,qBAAT,CAA+B;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAA/B,EAMJ;AAAA;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,QAAQ,CAACE,QAAD,EAAWC,OAAX,CAA7B;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBR,cAAc,CAACM,QAAD,CAAtC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYC,cAAc,CAACC,UAAD,CAAhC;;AAEA,QAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAaC,OAAb,KAAiC;AACxDN,IAAAA,OAAO,CAAEO,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWR,MAAAA,IAAI,EAAEO;AAAjB,KAAX,CAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,eAAD;AACE,IAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CADtB;AAEE,IAAA,KAAK,EAAEP,IAAI,CAACS,SAFd;AAGE,IAAA,WAAW,EAAET,IAAI,CAACU,WAHpB;AAIE,IAAA,IAAI,EAAEV,IAAI,CAACA,IAJb;AAKE,IAAA,YAAY,EAAEK;AALhB;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAxBeT,qB;UAOOD,Q,EACGF,c;;;KARVG,qB","sourcesContent":["import { useRecoilState } from 'recoil';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport { useTable, Options } from 'recoil-table';\r\n\r\nexport function RecoilTablePagination({\r\n  tableKey,\r\n  options,\r\n}: {\r\n  tableKey: string;\r\n  options: Options;\r\n}) {\r\n  const { pageAtom } = useTable(tableKey, options);\r\n  const [page, setPage] = useRecoilState(pageAtom);\r\n  const { total } = useRecoilValue(selectRows);\r\n  \r\n  const handleChangePage = (event: any, newPage: number) => {\r\n    setPage((prev) => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  return (\r\n    <TablePagination\r\n      rowsPerPageOptions={[5, 10, 25]}\r\n      count={page.totalRows}\r\n      rowsPerPage={page.rowsPerPage}\r\n      page={page.page}\r\n      onPageChange={handleChangePage}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
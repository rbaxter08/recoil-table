{"ast":null,"code":"import { selectorFamily } from 'recoil';\nimport { dataState } from './data';\nimport { pageState } from './page';\nimport { sortState } from './sort';\nexport const selectSortedData = selectorFamily({\n  key: 'select-table-sort-data',\n  get: tableKey => ({\n    get\n  }) => {\n    const sortColumn = get(sortState(tableKey));\n    const rows = get(dataState(tableKey)).data;\n    const sortedRows = data.sort((a, b) => {\n      return a[sortColumn.columnId] - b[sortColumn.columnId];\n    });\n    return pageRows;\n  }\n});\nexport const selectedPaginatedData = selectorFamily({\n  key: 'select-table-page-data',\n  get: tableKey => ({\n    get\n  }) => {\n    const page = get(pageState(tableKey));\n    const rows = get(dataState(tableKey)).data;\n    const start = page.rowsPerPage * page.page;\n    const end = start + page.rowsPerPage - 1;\n    const pageRows = rows.slice(start, end);\n    return pageRows;\n  }\n});\nexport const rowSelector = selectorFamily({\n  key: 'select-table-rows',\n  get: ({\n    tableKey,\n    options\n  }) => ({\n    get\n  }) => {\n    return options.controlledPagination ? {\n      rows: get(dataState(tableKey)).data,\n      total: get(dataState(tableKey)).total\n    } : {\n      rows: get(selectedPaginatedData(tableKey)),\n      total: get(dataState(tableKey)).data.length\n    };\n  }\n});","map":{"version":3,"sources":["C:/Users/rbaxt/Projects/recoil-table/packages/recoil-table/selectors/rows.ts"],"names":["selectorFamily","dataState","pageState","sortState","selectSortedData","key","get","tableKey","sortColumn","rows","data","sortedRows","sort","a","b","columnId","pageRows","selectedPaginatedData","page","start","rowsPerPage","end","slice","rowSelector","options","controlledPagination","total","length"],"mappings":"AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,QAA0B,QAA1B;AAGA,OAAO,MAAMC,gBAAgB,GAAGJ,cAAc,CAAc;AAC1DK,EAAAA,GAAG,EAAE,wBADqD;AAE1DC,EAAAA,GAAG,EACAC,QAAD,IACA,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AACX,UAAME,UAAU,GAAGF,GAAG,CAACH,SAAS,CAACI,QAAD,CAAV,CAAtB;AACA,UAAME,IAAI,GAAGH,GAAG,CAACL,SAAS,CAACM,QAAD,CAAV,CAAH,CAAyBG,IAAtC;AACA,UAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrC,aAAOD,CAAC,CAACL,UAAU,CAACO,QAAZ,CAAD,GAAyBD,CAAC,CAACN,UAAU,CAACO,QAAZ,CAAjC;AACD,KAFkB,CAAnB;AAGA,WAAOC,QAAP;AACD;AAXuD,CAAd,CAAvC;AAcP,OAAO,MAAMC,qBAAqB,GAAGjB,cAAc,CAAc;AAC/DK,EAAAA,GAAG,EAAE,wBAD0D;AAE/DC,EAAAA,GAAG,EACAC,QAAD,IACA,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AACX,UAAMY,IAAI,GAAGZ,GAAG,CAACJ,SAAS,CAACK,QAAD,CAAV,CAAhB;AACA,UAAME,IAAI,GAAGH,GAAG,CAACL,SAAS,CAACM,QAAD,CAAV,CAAH,CAAyBG,IAAtC;AACA,UAAMS,KAAK,GAAGD,IAAI,CAACE,WAAL,GAAmBF,IAAI,CAACA,IAAtC;AACA,UAAMG,GAAG,GAAGF,KAAK,GAAGD,IAAI,CAACE,WAAb,GAA2B,CAAvC;AACA,UAAMJ,QAAQ,GAAGP,IAAI,CAACa,KAAL,CAAWH,KAAX,EAAkBE,GAAlB,CAAjB;AACA,WAAOL,QAAP;AACD;AAX4D,CAAd,CAA5C;AAcP,OAAO,MAAMO,WAAW,GAAGvB,cAAc,CAAW;AAClDK,EAAAA,GAAG,EAAE,mBAD6C;AAElDC,EAAAA,GAAG,EACD,CAAC;AAAEC,IAAAA,QAAF;AAAYiB,IAAAA;AAAZ,GAAD,KACA,CAAC;AAAElB,IAAAA;AAAF,GAAD,KAAa;AACX,WAAOkB,OAAO,CAACC,oBAAR,GACH;AACEhB,MAAAA,IAAI,EAAEH,GAAG,CAACL,SAAS,CAACM,QAAD,CAAV,CAAH,CAAyBG,IADjC;AAEEgB,MAAAA,KAAK,EAAEpB,GAAG,CAACL,SAAS,CAACM,QAAD,CAAV,CAAH,CAAyBmB;AAFlC,KADG,GAKH;AACEjB,MAAAA,IAAI,EAAEH,GAAG,CAACW,qBAAqB,CAACV,QAAD,CAAtB,CADX;AAEEmB,MAAAA,KAAK,EAAEpB,GAAG,CAACL,SAAS,CAACM,QAAD,CAAV,CAAH,CAAyBG,IAAzB,CAA8BiB;AAFvC,KALJ;AASD;AAd+C,CAAX,CAAlC","sourcesContent":["import { selectorFamily } from 'recoil';\r\nimport { dataState } from './data';\r\nimport { pageState } from './page';\r\nimport { sortState } from './sort';\r\nimport { columnState } from './columns';\r\n\r\nexport const selectSortedData = selectorFamily<any, string>({\r\n  key: 'select-table-sort-data',\r\n  get:\r\n    (tableKey) =>\r\n    ({ get }) => {\r\n      const sortColumn = get(sortState(tableKey));\r\n      const rows = get(dataState(tableKey)).data;\r\n      const sortedRows = data.sort((a, b) => {\r\n        return a[sortColumn.columnId] - b[sortColumn.columnId];\r\n      });\r\n      return pageRows;\r\n    },\r\n});\r\n\r\nexport const selectedPaginatedData = selectorFamily<any, string>({\r\n  key: 'select-table-page-data',\r\n  get:\r\n    (tableKey) =>\r\n    ({ get }) => {\r\n      const page = get(pageState(tableKey));\r\n      const rows = get(dataState(tableKey)).data;\r\n      const start = page.rowsPerPage * page.page;\r\n      const end = start + page.rowsPerPage - 1;\r\n      const pageRows = rows.slice(start, end);\r\n      return pageRows;\r\n    },\r\n});\r\n\r\nexport const rowSelector = selectorFamily<any, any>({\r\n  key: 'select-table-rows',\r\n  get:\r\n    ({ tableKey, options }) =>\r\n    ({ get }) => {\r\n      return options.controlledPagination\r\n        ? {\r\n            rows: get(dataState(tableKey)).data,\r\n            total: get(dataState(tableKey)).total,\r\n          }\r\n        : {\r\n            rows: get(selectedPaginatedData(tableKey)),\r\n            total: get(dataState(tableKey)).data.length,\r\n          };\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}